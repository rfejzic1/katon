module -> {use} {decl_stat}

use -> "use" simple_string ["as" ident]
scope -> "public" | "private"
decl_stat -> [scope] (attrib_decl stat_end | method_decl)

var_decl -> ("var" | "const") ident decl_operator
attrib_decl -> var_decl expr

method_decl -> ident "(" [param_list] ")" stat_block
stat_block -> "{" {simple_stat | control_stat} "}"

simple_stat -> (local_decl | assign_stat | return_stat | continue_stat | break_stat | throw_stat) stat_end
local_decl -> var_decl (expr | deep_copy)
assign_stat -> variable assign_operator (expr | deep_copy)
return_stat -> "return" expr;
continue_stat -> "continue" stat_end
break_stat -> "break" stat_end
throw_stat -> "throw" expr;
deep_copy -> "new" variable;

control_stat -> if_stat | for_stat | while_stat | try_catch_stat
if_stat -> "if" expr stat_block {"elseif" expr stat_block} ["else" expr stat_block]
for_stat -> "for" ident "in" variable stat_block
while_stat -> "while" expr stat_block
try_catch_stat -> "try" stat_block "catch" ident stat_block

expr_list -> expr  { "," expr }
ident_list -> ident { "," ident }
param_list -> param { "," param }

/ Operator precedence:
// function call
// array access
// member access
// not
// * / % ^
// + -
// <, <=, >=, >
// != ==
// and
// or
// = += -= *= /= %= ^=

expr -> cond_term { "or" cond_term }
cond_term -> cond_factor { "and" cond_factor }
cond_factor -> cond_equ  { ("==" | "!=") cond_equ }
cond_equ -> math_expr { ("<=" | "<" | ">" | ">=") math_expr }

math_expr -> term { ("+" | "-") term }
term -> notable { ("^" | "*" | "/" | "%") notable }
notable -> ["not"] factor [cast]
factor -> ( variable | value | "(" expr ")" )

let expr = a == b
let expr = a + c * 4 < b == true and b + 3 > 0 != false or d.getAverage() as Integer
let expr = ((((a + (c * 4)) < b) == true) and (((b + 3) > 0) != false)) or ((d.getAverage()) as Integer)

variable -> (ident { method_call | array_access }) [ "." variable ]
method_call -> "(" [expr_list] ")"
array_access -> "[" expr "]"
value -> number | simple_string | interpolated_string | array | object | lambda
cast -> "as" primitive_type

number -> integer | double
lambda -> "(" ident_list ")" "{" stat_block "}"
object -> "{" {decl_stat} "}"
array -> "[" expr_list "]"
ident -> (alpha | "_") {alpha | digit | "_"}

param -> ident [cast]
primitive_type -> "String" | "Integer" | "Double" | "Boolean"

boolean -> "true" | "false"
integer -> digit_zero | digit_no_zero {digit}
double -> "." integer
string -> {character | digit}
interpolated_string -> """ string """
simple_string -> "'" string "'"

digit_no_zero -> "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" 
digit_zero -> "0"
digit -> digit_zero | digit_no_zero
alpha -> ?any alphabet character?
special -> ?special chars?
character -> alpha | special

decl_operator -> "="
assign_operator -> "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "^="
stat_end -> ";"
